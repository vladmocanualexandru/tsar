{"version":3,"file":"graphics-extras.min.js","sources":["../src/index.ts","../src/drawTorus.ts","../src/drawChamferRect.ts","../src/drawFilletRect.ts","../src/drawRegularPolygon.ts"],"sourcesContent":["import { Graphics } from '@pixi/graphics';\nimport { drawTorus } from './drawTorus';\nimport { drawChamferRect } from './drawChamferRect';\nimport { drawFilletRect } from './drawFilletRect';\nimport { drawRegularPolygon } from './drawRegularPolygon';\n\nexport interface IGraphicsExtras {\n    drawTorus: typeof drawTorus;\n    drawChamferRect: typeof drawChamferRect;\n    drawFilletRect: typeof drawFilletRect;\n    drawRegularPolygon: typeof drawRegularPolygon;\n}\n\n// Assign extras to Graphics\nObject.defineProperties(Graphics.prototype, {\n    drawTorus: { value: drawTorus },\n    drawChamferRect: { value: drawChamferRect },\n    drawFilletRect: { value: drawFilletRect },\n    drawRegularPolygon: { value: drawRegularPolygon },\n});\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw a torus shape, like a donut. Can be used for something like a circle loader.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n *\n * @method PIXI.Graphics#drawTorus\n * @param {number} x - X position\n * @param {number} y - Y position\n * @param {number} innerRadius - Inner circle radius\n * @param {number} outerRadius - Outer circle radius\n * @param {number} sweep - How much of the circle to fill, in radius\n * @return {PIXI.Graphics}\n */\nexport function drawTorus(this: Graphics,\n    x: number,\n    y: number,\n    innerRadius: number,\n    outerRadius: number,\n    startArc = 0,\n    endArc: number = Math.PI * 2): Graphics\n{\n    if ((endArc - startArc) >= Math.PI * 2)\n    {\n        return this\n            .drawCircle(x, y, outerRadius)\n            .beginHole()\n            .drawCircle(x, y, innerRadius)\n            .endHole();\n    }\n\n    return this\n        .arc(x, y, innerRadius, endArc, startArc, true)\n        .arc(x, y, outerRadius, startArc, endArc, false)\n        .closePath();\n}\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw Rectangle with chamfer corners.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n *\n * @method PIXI.Graphics#drawChamferRect\n * @param {number} x - Upper left corner of rect\n * @param {number} y - Upper right corner of rect\n * @param {number} width - Width of rect\n * @param {number} height - Height of rect\n * @param {number} chamfer - accept negative or positive values\n * @return {PIXI.Graphics} Returns self.\n */\nexport function drawChamferRect(this: Graphics,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    chamfer: number): Graphics\n{\n    if (chamfer === 0)\n    {\n        return this.drawRect(x, y, width, height);\n    }\n\n    const maxChamfer = Math.min(width, height) / 2;\n    const inset = Math.min(maxChamfer, Math.max(-maxChamfer, chamfer));\n    const right = x + width;\n    const bottom = y + height;\n    const dir = inset < 0 ? -inset : 0;\n    const size = Math.abs(inset);\n\n    return this\n        .moveTo(x, y + size)\n        .arcTo(x + dir, y + dir, x + size, y, size)\n        .lineTo(right - size, y)\n        .arcTo(right - dir, y + dir, right, y + size, size)\n        .lineTo(right, bottom - size)\n        .arcTo(right - dir, bottom - dir, x + width - size, bottom, size)\n        .lineTo(x + size, bottom)\n        .arcTo(x + dir, bottom - dir, x, bottom - size, size)\n        .closePath();\n}\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw Rectangle with fillet corners.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n *\n * @method PIXI.Graphics#drawFilletRect\n * @param {number} x - Upper left corner of rect\n * @param {number} y - Upper right corner of rect\n * @param {number} width - Width of rect\n * @param {number} height - Height of rect\n * @param {number} fillet - non-zero real number, size of corner cutout\n * @return {PIXI.Graphics} Returns self.\n */\nexport function drawFilletRect(this: Graphics,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    fillet: number): Graphics\n{\n    if (fillet <= 0)\n    {\n        return this.drawRect(x, y, width, height);\n    }\n\n    const inset = Math.min(fillet, Math.min(width, height) / 2);\n    const right = x + width;\n    const bottom = y + height;\n    const points = [\n        x + inset, y,\n        right - inset, y,\n        right, y + inset,\n        right, bottom - inset,\n        right - inset, bottom,\n        x + inset, bottom,\n        x, bottom - inset,\n        x, y + inset,\n    ];\n\n    // Remove overlapping points\n    for (let i = points.length - 1; i >= 2; i -= 2)\n    {\n        if (points[i] === points[i - 2] && points[i - 1] === points[i - 3])\n        {\n            points.splice(i - 1, 2);\n        }\n    }\n\n    return this.drawPolygon(points);\n}\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw a regular polygon where all sides are the same length.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n *\n * @method PIXI.Graphics#drawRegularPolygon\n * @param {number} x - X position\n * @param {number} y - Y position\n * @param {number} radius - Polygon radius\n * @param {number} sides - Minimum value is 3\n * @param {number} rotation - Starting rotation values in radians..\n * @return {PIXI.Graphics}\n */\nexport function drawRegularPolygon(this: Graphics,\n    x: number,\n    y: number,\n    radius: number,\n    sides: number,\n    rotation = 0): Graphics\n{\n    sides = Math.max(sides | 0, 3);\n    const startAngle = (-1 * Math.PI / 2) + rotation;\n    const delta = (Math.PI * 2) / sides;\n    const polygon = [];\n\n    for (let i = 0; i < sides; i++)\n    {\n        const angle = (i * delta) + startAngle;\n\n        polygon.push(\n            x + (radius * Math.cos(angle)),\n            y + (radius * Math.sin(angle))\n        );\n    }\n\n    return this.drawPolygon(polygon);\n}\n"],"names":["Object","defineProperties","Graphics","prototype","drawTorus","value","x","y","innerRadius","outerRadius","startArc","endArc","Math","PI","this","drawCircle","beginHole","endHole","arc","closePath","drawChamferRect","width","height","chamfer","drawRect","maxChamfer","min","inset","max","right","bottom","dir","size","abs","moveTo","arcTo","lineTo","drawFilletRect","fillet","points","i","length","splice","drawPolygon","drawRegularPolygon","radius","sides","rotation","startAngle","delta","polygon","angle","push","cos","sin"],"mappings":";;;;;;;iDAcAA,OAAOC,iBAAiBC,WAASC,UAAW,CACxCC,UAAW,CAAEC,eCCbC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,oBAHAD,kBACAC,EAA2B,EAAVC,KAAKC,IAEjBF,EAASD,GAAuB,EAAVE,KAAKC,GAErBC,KACFC,WAAWT,EAAGC,EAAGE,GACjBO,YACAD,WAAWT,EAAGC,EAAGC,GACjBS,UAGFH,KACFI,IAAIZ,EAAGC,EAAGC,EAAaG,EAAQD,GAAU,GACzCQ,IAAIZ,EAAGC,EAAGE,EAAaC,EAAUC,GAAQ,GACzCQ,cDnBLC,gBAAiB,CAAEf,eEAnBC,EACAC,EACAc,EACAC,EACAC,GAEA,GAAgB,IAAZA,EAEA,OAAOT,KAAKU,SAASlB,EAAGC,EAAGc,EAAOC,GAGtC,IAAMG,EAAab,KAAKc,IAAIL,EAAOC,GAAU,EACvCK,EAAQf,KAAKc,IAAID,EAAYb,KAAKgB,KAAKH,EAAYF,IACnDM,EAAQvB,EAAIe,EACZS,EAASvB,EAAIe,EACbS,EAAMJ,EAAQ,GAAKA,EAAQ,EAC3BK,EAAOpB,KAAKqB,IAAIN,GAEtB,OAAOb,KACFoB,OAAO5B,EAAGC,EAAIyB,GACdG,MAAM7B,EAAIyB,EAAKxB,EAAIwB,EAAKzB,EAAI0B,EAAMzB,EAAGyB,GACrCI,OAAOP,EAAQG,EAAMzB,GACrB4B,MAAMN,EAAQE,EAAKxB,EAAIwB,EAAKF,EAAOtB,EAAIyB,EAAMA,GAC7CI,OAAOP,EAAOC,EAASE,GACvBG,MAAMN,EAAQE,EAAKD,EAASC,EAAKzB,EAAIe,EAAQW,EAAMF,EAAQE,GAC3DI,OAAO9B,EAAI0B,EAAMF,GACjBK,MAAM7B,EAAIyB,EAAKD,EAASC,EAAKzB,EAAGwB,EAASE,EAAMA,GAC/Cb,cF1BLkB,eAAgB,CAAEhC,eGDlBC,EACAC,EACAc,EACAC,EACAgB,GAEA,GAAIA,GAAU,EAEV,OAAOxB,KAAKU,SAASlB,EAAGC,EAAGc,EAAOC,GAkBtC,IAfA,IAAMK,EAAQf,KAAKc,IAAIY,EAAQ1B,KAAKc,IAAIL,EAAOC,GAAU,GACnDO,EAAQvB,EAAIe,EACZS,EAASvB,EAAIe,EACbiB,EAAS,CACXjC,EAAIqB,EAAOpB,EACXsB,EAAQF,EAAOpB,EACfsB,EAAOtB,EAAIoB,EACXE,EAAOC,EAASH,EAChBE,EAAQF,EAAOG,EACfxB,EAAIqB,EAAOG,EACXxB,EAAGwB,EAASH,EACZrB,EAAGC,EAAIoB,GAIFa,EAAID,EAAOE,OAAS,EAAGD,GAAK,EAAGA,GAAK,EAErCD,EAAOC,KAAOD,EAAOC,EAAI,IAAMD,EAAOC,EAAI,KAAOD,EAAOC,EAAI,IAE5DD,EAAOG,OAAOF,EAAI,EAAG,GAI7B,OAAO1B,KAAK6B,YAAYJ,KHhCxBK,mBAAoB,CAAEvC,eIFtBC,EACAC,EACAsC,EACAC,EACAC,gBAAAA,KAEAD,EAAQlC,KAAKgB,IAAY,EAARkB,EAAW,GAK5B,IAJA,IAAME,GAAe,EAAIpC,KAAKC,GAAK,EAAKkC,EAClCE,EAAmB,EAAVrC,KAAKC,GAAUiC,EACxBI,EAAU,GAEPV,EAAI,EAAGA,EAAIM,EAAON,IAC3B,CACI,IAAMW,EAASX,EAAIS,EAASD,EAE5BE,EAAQE,KACJ9C,EAAKuC,EAASjC,KAAKyC,IAAIF,GACvB5C,EAAKsC,EAASjC,KAAK0C,IAAIH,IAI/B,OAAOrC,KAAK6B,YAAYO"}