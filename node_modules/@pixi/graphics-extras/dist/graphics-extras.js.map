{"version":3,"file":"graphics-extras.js","sources":["../src/drawTorus.ts","../src/drawChamferRect.ts","../src/drawFilletRect.ts","../src/drawRegularPolygon.ts","../src/index.ts"],"sourcesContent":["import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw a torus shape, like a donut. Can be used for something like a circle loader.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n *\n * @method PIXI.Graphics#drawTorus\n * @param {number} x - X position\n * @param {number} y - Y position\n * @param {number} innerRadius - Inner circle radius\n * @param {number} outerRadius - Outer circle radius\n * @param {number} sweep - How much of the circle to fill, in radius\n * @return {PIXI.Graphics}\n */\nexport function drawTorus(this: Graphics,\n    x: number,\n    y: number,\n    innerRadius: number,\n    outerRadius: number,\n    startArc = 0,\n    endArc: number = Math.PI * 2): Graphics\n{\n    if ((endArc - startArc) >= Math.PI * 2)\n    {\n        return this\n            .drawCircle(x, y, outerRadius)\n            .beginHole()\n            .drawCircle(x, y, innerRadius)\n            .endHole();\n    }\n\n    return this\n        .arc(x, y, innerRadius, endArc, startArc, true)\n        .arc(x, y, outerRadius, startArc, endArc, false)\n        .closePath();\n}\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw Rectangle with chamfer corners.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n *\n * @method PIXI.Graphics#drawChamferRect\n * @param {number} x - Upper left corner of rect\n * @param {number} y - Upper right corner of rect\n * @param {number} width - Width of rect\n * @param {number} height - Height of rect\n * @param {number} chamfer - accept negative or positive values\n * @return {PIXI.Graphics} Returns self.\n */\nexport function drawChamferRect(this: Graphics,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    chamfer: number): Graphics\n{\n    if (chamfer === 0)\n    {\n        return this.drawRect(x, y, width, height);\n    }\n\n    const maxChamfer = Math.min(width, height) / 2;\n    const inset = Math.min(maxChamfer, Math.max(-maxChamfer, chamfer));\n    const right = x + width;\n    const bottom = y + height;\n    const dir = inset < 0 ? -inset : 0;\n    const size = Math.abs(inset);\n\n    return this\n        .moveTo(x, y + size)\n        .arcTo(x + dir, y + dir, x + size, y, size)\n        .lineTo(right - size, y)\n        .arcTo(right - dir, y + dir, right, y + size, size)\n        .lineTo(right, bottom - size)\n        .arcTo(right - dir, bottom - dir, x + width - size, bottom, size)\n        .lineTo(x + size, bottom)\n        .arcTo(x + dir, bottom - dir, x, bottom - size, size)\n        .closePath();\n}\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw Rectangle with fillet corners.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n *\n * @method PIXI.Graphics#drawFilletRect\n * @param {number} x - Upper left corner of rect\n * @param {number} y - Upper right corner of rect\n * @param {number} width - Width of rect\n * @param {number} height - Height of rect\n * @param {number} fillet - non-zero real number, size of corner cutout\n * @return {PIXI.Graphics} Returns self.\n */\nexport function drawFilletRect(this: Graphics,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    fillet: number): Graphics\n{\n    if (fillet <= 0)\n    {\n        return this.drawRect(x, y, width, height);\n    }\n\n    const inset = Math.min(fillet, Math.min(width, height) / 2);\n    const right = x + width;\n    const bottom = y + height;\n    const points = [\n        x + inset, y,\n        right - inset, y,\n        right, y + inset,\n        right, bottom - inset,\n        right - inset, bottom,\n        x + inset, bottom,\n        x, bottom - inset,\n        x, y + inset,\n    ];\n\n    // Remove overlapping points\n    for (let i = points.length - 1; i >= 2; i -= 2)\n    {\n        if (points[i] === points[i - 2] && points[i - 1] === points[i - 3])\n        {\n            points.splice(i - 1, 2);\n        }\n    }\n\n    return this.drawPolygon(points);\n}\n","import type { Graphics } from '@pixi/graphics';\n\n/**\n * Draw a regular polygon where all sides are the same length.\n *\n * _Note: Only available with **@pixi/graphics-extras**._\n *\n * @method PIXI.Graphics#drawRegularPolygon\n * @param {number} x - X position\n * @param {number} y - Y position\n * @param {number} radius - Polygon radius\n * @param {number} sides - Minimum value is 3\n * @param {number} rotation - Starting rotation values in radians..\n * @return {PIXI.Graphics}\n */\nexport function drawRegularPolygon(this: Graphics,\n    x: number,\n    y: number,\n    radius: number,\n    sides: number,\n    rotation = 0): Graphics\n{\n    sides = Math.max(sides | 0, 3);\n    const startAngle = (-1 * Math.PI / 2) + rotation;\n    const delta = (Math.PI * 2) / sides;\n    const polygon = [];\n\n    for (let i = 0; i < sides; i++)\n    {\n        const angle = (i * delta) + startAngle;\n\n        polygon.push(\n            x + (radius * Math.cos(angle)),\n            y + (radius * Math.sin(angle))\n        );\n    }\n\n    return this.drawPolygon(polygon);\n}\n","import { Graphics } from '@pixi/graphics';\nimport { drawTorus } from './drawTorus';\nimport { drawChamferRect } from './drawChamferRect';\nimport { drawFilletRect } from './drawFilletRect';\nimport { drawRegularPolygon } from './drawRegularPolygon';\n\nexport interface IGraphicsExtras {\n    drawTorus: typeof drawTorus;\n    drawChamferRect: typeof drawChamferRect;\n    drawFilletRect: typeof drawFilletRect;\n    drawRegularPolygon: typeof drawRegularPolygon;\n}\n\n// Assign extras to Graphics\nObject.defineProperties(Graphics.prototype, {\n    drawTorus: { value: drawTorus },\n    drawChamferRect: { value: drawChamferRect },\n    drawFilletRect: { value: drawFilletRect },\n    drawRegularPolygon: { value: drawRegularPolygon },\n});\n"],"names":["Graphics"],"mappings":"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"}